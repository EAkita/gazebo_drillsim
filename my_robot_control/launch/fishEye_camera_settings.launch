<!--This isn't a launch file, just settings for a fisheye camera-->
<sensor name="FishEyeCamera" type="wideanglecamera">
    <camera name="left">
      <pose>0 0 0 0 0 0</pose>
      <horizontal_fov>3.141592</horizontal_fov>
      <image>
        <width>848</width>
        <height>800</height>
        <format>R8G8B8</format>
      </image>
      <clip>
        <near>0.15</near>
        <far>1500</far>
      </clip>
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.0001</stddev>
      </noise>
      <lens>
        <type>custom</type> 
        <custom_function> <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
          <c1>1.0</c1>    <!-- linear scaling -->
          <c2>1.95</c2>       <!-- angle scaling -->
          <f>6</f>       <!-- one more scaling parameter -->
          <fun>tan</fun>   <!-- one of sin,tan,id -->
        </custom_function>
        <scale_to_hfov>true</scale_to_hfov>  <!-- if it is set to `true` your horizontal FOV will ramain as defined, othervise it depends on lens type and custom function, if there is one -->
        <!-- clip everything that is outside of this angle -->
        <cutoff_angle>2.84488668</cutoff_angle>
        <env_texture_size>512</env_texture_size> <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
      </lens>
      <always_on>1</always_on>
      <update_rate>30</update_rate>
    </camera>
    <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
      <robotNamespace>/t265</robotNamespace>
      <cameraName>stereo_ir/left</cameraName>
      <imageTopicName>fisheye_image_raw</imageTopicName>
      <cameraInfoTopicName>camera_info</cameraInfoTopicName>
      <frameName>camera_link</frameName>
      <hackBaseline>0</hackBaseline>
    </plugin>
  </sensor>
  

<!-- Normal camera-->

  <sensor name="camera" type="wideanglecamera">
  <camera>
    <horizontal_fov>6.283</horizontal_fov>
    <image>
      <width>320</width>
      <height>240</height>
    </image>
    <clip>
      <near>0.1</near>
      <far>100</far>
    </clip>
    <!-- A new section named `lens`. -->
    <lens>
      <!-- type element is mandatory -->
      <type>custom</type>
      <!-- manually defined mapping function r = c1*f*fun(theta/c2 + c3) -->
      <!-- More information here: https://en.wikipedia.org/wiki/Fisheye_lens#Mapping_function -->
      <custom_function>
        <c1>1.05</c1>
        <!-- linear scaling -->
        <c2>4</c2>
        <!-- angle scaling -->
        <f>1.0</f>
        <!-- one more scaling parameter -->
        <fun>tan</fun>
        <!-- one of sin,tan,id -->
      </custom_function>
      <!-- if it is set to `true` your horizontal FOV will ramain as defined -->
      <!-- othervise it depends on lens type and custom function, if there is one -->
      <scale_to_hfov>true</scale_to_hfov>
      <!-- clip everything that is outside of this angle -->
      <cutoff_angle>3.1415</cutoff_angle>
      <!-- resolution of the cubemap texture, the highter it is - the sharper is your image -->
      <env_texture_size>512</env_texture_size>
    </lens>
    <always_on>1</always_on>
    <update_rate>30</update_rate>
  </camera>
  <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
    <cameraName>camera1</cameraName>
    <imageTopicName>image_raw</imageTopicName>
    <cameraInfoTopicName>camera_info</cameraInfoTopicName>
    <frameName>camera_link</frameName>
    <hackBaseline>0.07</hackBaseline>
  </plugin>
</sensor>



Camera added by Akita
<link name="camera">
          <collision>
              <origin xyz="0 0 0" rpy="0 0 0"/>
              <geometry>
                  <!--<box size="${cameraSize} ${cameraSize} ${cameraSize}"/>-->
                  <!--https://github.com/richardw05/mybot_ws/blob/master/src/mybot_description/urdf/mybot.xacro -->
                  <box size="0.05 0.05 0.05"/>
              </geometry>
          </collision>

          <visual>
              <origin xyz="0 0 0" rpy="0 0 0"/>
              <geometry>
                  <box size=" 0.05 0.05 0.05"/>
              </geometry>
              <material name="green"/>
          </visual>

          <inertial>
              <mass value="0.1" />
              <origin xyz="0 0 0" rpy="0 0 0"/>
              <box_inertia m="0.1" x="0.01" y="0.01" z="0.01" />
              <inertia ixx="1e-6" ixy="0" ixz="0" iyy="1e-6" iyz="0" izz="1e-6" />
          </inertial>
      </link>

      <joint name="camera_joint" type="fixed">
          <axis xyz="0 0 0" />
          <!--origin xyz="0 0 1" rpy="0 -0.785 -1.570796327"/-->
          <!-- cam size - 0.05 /2-->
          <origin xyz="0.025 0 1" rpy="0 0 0"/>
          <!-- try to flip this to face the derrick, and put in the same axis as drill pipe-->
          <parent link="base_link"/>
          <child link="camera"/>
      </joint>

      <gazebo reference="camera">
          <material>Gazebo/Green</material>
          <sensor type="camera" name="camera1">
              <update_rate>30.0</update_rate>
              <camera name="head">
                  <horizontal_fov>1.3962634</horizontal_fov>
                  <image>
                      <width>800</width>
                      <height>800</height>
                      <format>R8G8B8</format>
                  </image>
                  <clip>
                      <near>0.02</near>
                      <far>300</far>
                  </clip>
              </camera>
              <plugin name="camera_controller" filename="libgazebo_ros_camera.so">
                  <alwaysOn>true</alwaysOn>
                  <updateRate>0.0</updateRate>
                  <cameraName>my_robot/camera1</cameraName>                <!--change this when you add new camera-->
                  <imageTopicName>image_raw</imageTopicName>
                  <cameraInfoTopicName>camera_info</cameraInfoTopicName>
                  <frameName>camera</frameName>
                  <hackBaseline>0.07</hackBaseline>
                  <distortionK1>0.0</distortionK1>
                  <distortionK2>0.0</distortionK2>
                  <distortionK3>0.0</distortionK3>
                  <distortionT1>0.0</distortionT1>
                  <distortionT2>0.0</distortionT2>
              </plugin>
          </sensor>
      </gazebo>

